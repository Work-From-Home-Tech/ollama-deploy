---
- name: "Start Playbook: Get and compile llamacpp"
  hosts: all
  gather_facts: true
  vars:
    gopath: /usr/local/go/bin
    localaipath: /opt/LocalAI
  environment:
    PATH: "{{ gopath }}:{{ ansible_env.PATH }}"
  become: true
  
  tasks:
  - name: Upgrade APT packages on server
    apt:
      upgrade: 'yes'
      update_cache: 'yes'
      cache_valid_time: 86400
  - name: Install Build Essential
    apt: pkg=build-essential state=present update_cache='yes'
  - name: Install ccache
    apt: pkg=ccache state=present update_cache='yes'
  - name: Install libabsl-dev
    apt: pkg=libabsl-dev state=present update_cache='yes'
  - name: Install cmake
    apt: pkg=cmake state=present update_cache='yes'
  - name: Install autoconf
    apt: pkg=autoconf state=present update_cache=true
  - name: Install libtool
    apt: pkg=libtool state=present update_cache=true
  - name: Install pkg-config
    apt: pkg=pkg-config state=present update_cache=true
  - name: Install protobuf-compiler-grpc
    apt: pkg=protobuf-compiler-grpc state=present update_cache='yes'
  - name: Install plibgrpc-dev
    apt: pkg=libgrpc-dev state=present update_cache='yes'
  - name: Install opencv
    apt: pkg=libopencv-dev state=present update_cache='yes'
  - name: Install python3-opencv
    apt: pkg=python3-opencv state=present update_cache='yes'
  - name: Install libclblast-dev
    apt: pkg=libclblast-dev state=present update_cache='yes'
    
  - name: Check if Golang Exists
    stat:
      path: /usr/local/go
    register: goexists
  - name: Check for presence of Golang
    debug:
      msg: "Golang not found so it will be installed."
    when: not goexists.stat.exists
  - name: Extract Golang
    ansible.builtin.unarchive:
        src: https://go.dev/dl/go1.22.2.linux-amd64.tar.gz
        dest: /usr/local
        remote_src: 'yes'
    when: not goexists.stat.exists
  - name: Check for {{ gopath }} In the environment file
    shell: cat /etc/environment
    register: gocheck
  - name: Update /etc/environment file
    ansible.builtin.copy:
      content: 'PATH="{{ ansible_env.PATH }}:{{ gopath }}"'
      dest: /etc/environment
    when: gocheck.stdout.find('go') == -1
  # - name: Show path
  #   debug: msg="PATH is {{ ansible_env.PATH  }} with check {{ gopath }}"
  - name: Clone LocalAI repository
    git:
      repo: https://github.com/mudler/LocalAI.git
      dest: /tmp/LocalAI
      clone: 'yes'
      update: 'yes'
  - name: Install protobuf tools
    shell: cd /tmp/LocalAI && go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
  - name: Install protobuf tools
    shell: cd /tmp/LocalAI && go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
  - name: Build LocalAI
    make:
      chdir: /tmp/LocalAI
      target: build
      params:
        BUILD_GRPC_FOR_BACKEND_LLAMA: ON
        # BUILD_TYPE: openblas
        GO_TAGS: "stablediffusion tts"
        BUILD_TYPE: clblas
        # GPU_TARGETS: gfx1030
        # CGO_CFLAGS: "-I/usr/include/opencv4"
        # CGO_CXXFLAGS: "-I/usr/include/opencv4"
        # CGO_LDFLAGS: "-L/opt/rocm/hip/lib -lamdhip64 -L/opt/rocm/lib -lOpenCL -L/usr/lib -lclblast -lrocblas -lhipblas -lrocrand -lomp -O3 --rtlib=compiler-rt -unwindlib=libgcc -lhipblas -lrocblas --hip-link"
  - name: Download Mistral Model
    ansible.builtin.get_url:
      url: https://huggingface.co/TheBloke/Mistral-7B-OpenOrca-GGUF/resolve/main/mistral-7b-openorca.Q6_K.gguf
      dest: /tmp/LocalAI/models/mistral-7b-openorca.Q6_K.gguf
  - name: Copy Mistral Model Config
    ansible.builtin.copy:
      src: /tmp/LocalAI/examples/configurations/mistral/
      dest: /tmp/LocalAI/models/
      remote_src: true
  - name: Download Mixtral Model
    ansible.builtin.get_url:
      url: https://huggingface.co/TheBloke/Mixtral-8x7B-Instruct-v0.1-GGUF/resolve/main/mixtral-8x7b-instruct-v0.1.Q2_K.gguf
      dest: /tmp/LocalAI/models/mixtral-8x7b-instruct-v0.1.Q2_K.gguf
  - name: Copy Mixtral Model Config
    ansible.builtin.copy:
      src: /tmp/LocalAI/examples/configurations/mixtral/
      dest: /tmp/LocalAI/models/
      remote_src: true


